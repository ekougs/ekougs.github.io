<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="//purl.org/dc/elements/1.1/" xmlns:content="//purl.org/rss/1.0/modules/content/" xmlns:atom="//www.w3.org/2005/Atom" version="2.0" xmlns:media="//search.yahoo.com/mrss/"><channel><title><![CDATA[iam - The bytes bait]]></title><description><![CDATA[My stories about development and deployment. Written and shared with humor and passion.]]></description><link>//localhost:8008/</link><image><url>//localhost:8008/favicon.png</url><title>iam - The bytes bait</title><link>//localhost:8008/</link></image><generator>Ghost 2.31</generator><lastBuildDate>Fri, 29 May 2020 20:42:14 GMT</lastBuildDate><atom:link href="//localhost:8008/tag/iam/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Quarkus + Auth0 , the missing guide]]></title><description><![CDATA[<h2 id="the-situation">The situation</h2><p>I am currently playing with <a href="https://twitter.com/QuarkusIO">@QuarkusIO</a> (for the native app promise) and <a href="https://twitter.com/kotlin">@kotlin</a> and was looking to integrate it with an IAM using JWT.<br>And because I am generous and don‚Äôt want you to spend as much time on this, may the following be of some help.</p>]]></description><link>//localhost:8008/quarkus-auth0-the-missing-guide/</link><guid isPermaLink="false">5ec6a26da5d121006e41691b</guid><category><![CDATA[iam]]></category><category><![CDATA[jwt]]></category><category><![CDATA[quarkus]]></category><category><![CDATA[auth0]]></category><category><![CDATA[dev]]></category><dc:creator><![CDATA[ekougs]]></dc:creator><pubDate>Wed, 07 Aug 2019 19:46:00 GMT</pubDate><content:encoded><![CDATA[<h2 id="the-situation">The situation</h2><p>I am currently playing with <a href="https://twitter.com/QuarkusIO">@QuarkusIO</a> (for the native app promise) and <a href="https://twitter.com/kotlin">@kotlin</a> and was looking to integrate it with an IAM using JWT.<br>And because I am generous and don‚Äôt want you to spend as much time on this, may the following be of some help.<br>So I chose to use <a href="https://twitter.com/auth0">@auth0</a> for the popular social networks integrations, the great support and tons of great guides, and the free offer for a solid authentication and authorization service.<br>Unfortunately for the lazy me, I did not find a straightforward guide. There are great guides for Spring and native backend but obviously nothing that could help me quickly.<br>If you are only interested by the solution, just click <a>here</a>.</p><h2 id="and-excitement-almost-became-panic">And excitement almost became panic</h2><p>¬´ Yeah, great, time to start a little sidequest ¬ª.<br>But not too long because, hey, I still have to get back to my primary purpose.<br><strong>So first I created a</strong> <a href="https://auth0.com/docs/dashboard/guides/applications/register-app-native">native application</a> <strong>on Auth0 to support my solution.</strong></p><p>Then it was time to make it work with my generated Quarkus backend. Quarkus‚Äô documentation is mostly easy to use. But when it came to the authentication/security settings, I was kind of lost at first.<br>So lost, that at a point, I considered writing my own custom filter to do this.<br>But I (almost) immediately felt that it was overkill and that there should be something simpler out there.</p><p>And then I chilled down, remembered that I was tired (never work tired, just never), and also thought that the people behind the framework were too smart not to provide easy ways to validate a token.</p><h2 id="enough-blabbering-the-facts-">Enough blabbering, the facts!</h2><p>At this point, I already spent 3 to 4 x 3h looking for a viable solution.<br>I then encountered my first pain point.</p><h3 id="debugging-ability-is-a-life-savior">Debugging ability is a life savior</h3><p>This is ¬†when after a few searches and tricks not worthy to mention here, <strong>I found this Github issue</strong> <a href="https://github.com/quarkusio/quarkus/issues/1163">smallrye-jwt not working in native mode ¬∑ Issue #1163 ¬∑ quarkusio/quarkus ¬∑ GitHub</a> that retrospectively was the first step toward resolution.<br>After reading the changes and analyzing what I should do, I decided that I would debug a little to understand what was wrong with my settings.<br>Usually, debugging is as easy as clicking a button on my favorite IDE, Intellij.<br>It didn‚Äôt work and I still don‚Äôt know why, because I didn‚Äôt take time to dig deeper.<br>But <strong>I found an alternative, run the</strong> <a href="https://quarkus.io/guides/getting-started-guide#running-the-application">Quarkus application</a><strong>, then</strong> <a href="https://www.jetbrains.com/help/idea/attaching-to-local-process.html">attach a debugger</a> <strong>to it</strong>. A little tedious but nothing unsurmountable.</p><h3 id="so-what-was-wrong">So what was wrong</h3><p>This is really where you should pay attention :smiley:<br>I first <strong>amended my pom to get the most recent available version for Quarkus</strong> (0.19.1 at the time).<br>As I debugged the applications and added enough <a href="https://quarkus.io/guides/logging-guide#logging-categories">logs for the targeted category</a> (<code>io.quarkus.elytron</code>, <code>io.smallrye.jwt</code>), I found the following to be able to read the JWT:</p><ul><li>You need the public key of the certificate used to sign it. You can find the certificate in the settings of your Auth0 application. Just scroll until you see the <strong>Show Advanced Settings</strong> link. Click on it, access the <strong>Certificates</strong> tab, download it with the <strong>Download certificate</strong> button. I spent too much time using the certificate instead of its public key. Be smarter. You can use this command to extract it <code>openssl x509 -pubkey -noout -in cert.pem ¬†&gt; pubkey.pem</code>.</li><li>The <code>mp.jwt.verify.issuer</code> is the <strong>Domain</strong> of your Auth0 application.</li></ul><h2 id="auth0-integration-guide">Auth0 integration guide</h2><p>The relevant parts of the solution</p><ul><li>Create a <a href="https://auth0.com/docs/dashboard/guides/applications/register-app-native">native application</a> on Auth0</li><li>Go to the Auth0 application settings, scroll until you see the <strong>Show Advanced Settings</strong> link. Click on it, access the <strong>Certificates</strong> tab, download it with the <strong>Download certificate</strong> button.</li><li>Don‚Äôt forget to extract the public key to the appropriate location ¬†<code>openssl x509 -pubkey -noout -in cert.pem ¬†&gt; pubkey.pem</code>.</li></ul><p>Extract of the <code>pom.xml</code></p><!--kg-card-begin: code--><pre><code>&lt;properties&gt;
	&lt;quarkus.version&gt;0.19.1&lt;/quarkus.version&gt;
	...
&lt;/properties&gt;
</code></pre><!--kg-card-end: code--><p>Extract of the security settings of the ¬†<code>application.properties</code> file</p><!--kg-card-begin: code--><pre><code>mp.jwt.verify.publickey.location=META-INF/resources/pubkey.pem
mp.jwt.verify.issuer=https://dev-******.eu.auth0.com/

quarkus.smallrye-jwt.auth-mechanism=MP-JWT
quarkus.smallrye-jwt.enabled=true
</code></pre><!--kg-card-end: code--><p>The REST resource used to test</p><!--kg-card-begin: code--><pre><code>@Path("/test")
@RequestScoped
class TestJWTService {
    @GET
    @PermitAll
    @Produces(MediaType.TEXT_PLAIN)
    fun hello(@Context ctx: SecurityContext): String {
        val caller = ctx.userPrincipal
        val name = if (caller == null) "anonymous" else caller.name
        val isSecure = ctx.isSecure
        val authScheme = ctx.authenticationScheme
        return "hello + $name, isSecure: $isSecure, authScheme: $authScheme"
    }
}
</code></pre><!--kg-card-end: code--><p>Get the token</p><!--kg-card-begin: code--><pre><code>curl --request POST \
  --url https://dev-bhmhh10f.eu.auth0.com/oauth/token \
  --header 'content-type: application/json' \
  --data '{"client_id":"your_client_id","client_secret":"your_client_secret","audience":"the_audience","grant_type":"client_credentials"}'
</code></pre><!--kg-card-end: code--><p>Test the token you just got</p><!--kg-card-begin: code--><pre><code>curl --request GET --url //localhost:8080/bags --header 'authorization: Bearer the_token_you_just_got'
</code></pre><!--kg-card-end: code--><p><a href="https://quarkus.io/guides/jwt-guide">Original documentation</a></p><p>Hope you enjoyed this article and guide.<br>You can follow me on twitter <a href="https://twitter.com/ekougs">@ekougs</a> for technical content and more üòÅ.</p>]]></content:encoded></item></channel></rss>